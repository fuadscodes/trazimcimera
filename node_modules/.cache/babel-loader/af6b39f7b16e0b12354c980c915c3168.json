{"ast":null,"code":"import defineToJSON from \"../jsutils/defineToJSON.mjs\";\n/**\r\n * Contains a range of UTF-8 character offsets and token references that\r\n * identify the region of the source from which the AST derived.\r\n */\n\nexport var Location =\n/**\r\n * The character offset at which this Node begins.\r\n */\n\n/**\r\n * The character offset at which this Node ends.\r\n */\n\n/**\r\n * The Token at which this Node begins.\r\n */\n\n/**\r\n * The Token at which this Node ends.\r\n */\n\n/**\r\n * The Source document the AST represents.\r\n */\nfunction Location(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n}; // Print a simplified form when appearing in JSON/util.inspect.\n\ndefineToJSON(Location, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\r\n * Represents a range of characters represented by a lexical token\r\n * within a Source.\r\n */\n\nexport var Token =\n/**\r\n * The kind of Token.\r\n */\n\n/**\r\n * The character offset at which this Node begins.\r\n */\n\n/**\r\n * The character offset at which this Node ends.\r\n */\n\n/**\r\n * The 1-indexed line number on which this Token appears.\r\n */\n\n/**\r\n * The 1-indexed column number at which this Token begins.\r\n */\n\n/**\r\n * For non-punctuation tokens, represents the interpreted value of the token.\r\n */\n\n/**\r\n * Tokens exist as nodes in a double-linked-list amongst all tokens\r\n * including ignored tokens. <SOF> is always the first node and <EOF>\r\n * the last.\r\n */\nfunction Token(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n}; // Print a simplified form when appearing in JSON/util.inspect.\n\ndefineToJSON(Token, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n/**\r\n * @internal\r\n */\n\nexport function isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\r\n * The list of all possible AST node types.\r\n */","map":{"version":3,"sources":["C:/Personal/Predmeti/DWS/Vjezbe/trazim-cimera/trazimcimera/node_modules/graphql/language/ast.mjs"],"names":["defineToJSON","Location","startToken","endToken","source","start","end","Token","kind","line","column","prev","value","next","isNode","maybeNode"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,6BAAzB;AAEA;;;;;AAIA,OAAO,IAAIC,QAAQ;AACnB;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;AAGA,SAASA,QAAT,CAAkBC,UAAlB,EAA8BC,QAA9B,EAAwCC,MAAxC,EAAgD;AAC9C,OAAKC,KAAL,GAAaH,UAAU,CAACG,KAAxB;AACA,OAAKC,GAAL,GAAWH,QAAQ,CAACG,GAApB;AACA,OAAKJ,UAAL,GAAkBA,UAAlB;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACA,OAAKC,MAAL,GAAcA,MAAd;AACD,CA1BM,C,CA0BJ;;AAEHJ,YAAY,CAACC,QAAD,EAAW,YAAY;AACjC,SAAO;AACLI,IAAAA,KAAK,EAAE,KAAKA,KADP;AAELC,IAAAA,GAAG,EAAE,KAAKA;AAFL,GAAP;AAID,CALW,CAAZ;AAMA;;;;;AAKA,OAAO,IAAIC,KAAK;AAChB;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;;AAKA,SAASA,KAAT,CAAeC,IAAf,EAAqBH,KAArB,EAA4BC,GAA5B,EAAiCG,IAAjC,EAAuCC,MAAvC,EAA+CC,IAA/C,EAAqDC,KAArD,EAA4D;AAC1D,OAAKJ,IAAL,GAAYA,IAAZ;AACA,OAAKH,KAAL,GAAaA,KAAb;AACA,OAAKC,GAAL,GAAWA,GAAX;AACA,OAAKG,IAAL,GAAYA,IAAZ;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKE,KAAL,GAAaA,KAAb;AACA,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKE,IAAL,GAAY,IAAZ;AACD,CAvCM,C,CAuCJ;;AAEHb,YAAY,CAACO,KAAD,EAAQ,YAAY;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAE,KAAKA,IADN;AAELI,IAAAA,KAAK,EAAE,KAAKA,KAFP;AAGLH,IAAAA,IAAI,EAAE,KAAKA,IAHN;AAILC,IAAAA,MAAM,EAAE,KAAKA;AAJR,GAAP;AAMD,CAPW,CAAZ;AAQA;;;;AAIA,OAAO,SAASI,MAAT,CAAgBC,SAAhB,EAA2B;AAChC,SAAOA,SAAS,IAAI,IAAb,IAAqB,OAAOA,SAAS,CAACP,IAAjB,KAA0B,QAAtD;AACD;AACD","sourcesContent":["import defineToJSON from \"../jsutils/defineToJSON.mjs\";\r\n\r\n/**\r\n * Contains a range of UTF-8 character offsets and token references that\r\n * identify the region of the source from which the AST derived.\r\n */\r\nexport var Location =\r\n/**\r\n * The character offset at which this Node begins.\r\n */\r\n\r\n/**\r\n * The character offset at which this Node ends.\r\n */\r\n\r\n/**\r\n * The Token at which this Node begins.\r\n */\r\n\r\n/**\r\n * The Token at which this Node ends.\r\n */\r\n\r\n/**\r\n * The Source document the AST represents.\r\n */\r\nfunction Location(startToken, endToken, source) {\r\n  this.start = startToken.start;\r\n  this.end = endToken.end;\r\n  this.startToken = startToken;\r\n  this.endToken = endToken;\r\n  this.source = source;\r\n}; // Print a simplified form when appearing in JSON/util.inspect.\r\n\r\ndefineToJSON(Location, function () {\r\n  return {\r\n    start: this.start,\r\n    end: this.end\r\n  };\r\n});\r\n/**\r\n * Represents a range of characters represented by a lexical token\r\n * within a Source.\r\n */\r\n\r\nexport var Token =\r\n/**\r\n * The kind of Token.\r\n */\r\n\r\n/**\r\n * The character offset at which this Node begins.\r\n */\r\n\r\n/**\r\n * The character offset at which this Node ends.\r\n */\r\n\r\n/**\r\n * The 1-indexed line number on which this Token appears.\r\n */\r\n\r\n/**\r\n * The 1-indexed column number at which this Token begins.\r\n */\r\n\r\n/**\r\n * For non-punctuation tokens, represents the interpreted value of the token.\r\n */\r\n\r\n/**\r\n * Tokens exist as nodes in a double-linked-list amongst all tokens\r\n * including ignored tokens. <SOF> is always the first node and <EOF>\r\n * the last.\r\n */\r\nfunction Token(kind, start, end, line, column, prev, value) {\r\n  this.kind = kind;\r\n  this.start = start;\r\n  this.end = end;\r\n  this.line = line;\r\n  this.column = column;\r\n  this.value = value;\r\n  this.prev = prev;\r\n  this.next = null;\r\n}; // Print a simplified form when appearing in JSON/util.inspect.\r\n\r\ndefineToJSON(Token, function () {\r\n  return {\r\n    kind: this.kind,\r\n    value: this.value,\r\n    line: this.line,\r\n    column: this.column\r\n  };\r\n});\r\n/**\r\n * @internal\r\n */\r\n\r\nexport function isNode(maybeNode) {\r\n  return maybeNode != null && typeof maybeNode.kind === 'string';\r\n}\r\n/**\r\n * The list of all possible AST node types.\r\n */\r\n"]},"metadata":{},"sourceType":"module"}