{"ast":null,"code":"var _jsxFileName = \"/home/rootpc/Desktop/Cimeri/Front/trazimcimera-master/src/views/DodajOglas/DodajOglas.js\";\nimport React, { useState } from \"react\";\nimport ToolbarLayout from \"../../components/ToolbarLayout/ToolbarLayout\";\nimport classes from './DodajOglas.css';\nimport Footer from \"../../components/Footer/Footer\";\nimport AuthApi from \"../../auth-api\";\nimport Cookies from 'js-cookie';\nimport { useHistory } from \"react-router-dom\";\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst DodajOglas = props => {\n  const POST_MUTATION = gql`\n        mutation {\n            addPost(postInfo: {\n            author: $id,\n            post_type: $type,\n            description: $description,\n            address: $address,\n            rent: $rent,\n            num_of_roommates: $roomMates,\n            }) {\n            post_id\n            description\n            address\n            rent\n            num_of_roommates\n            author {\n                user_id\n                username\n                name\n                surname\n                city\n                address\n                email\n                bio\n                gender\n                date_of_birth\n                pr_picture_url\n                pref_roommate_num\n            }\n            post_type {\n                post_type_id\n            }\n            }\n        }\n        `;\n  const Auth = React.useContext(AuthApi);\n  const [address, setAddress] = useState(\"\");\n  const [rent, setRent] = useState(\"\");\n  const [roomMates, setRoomMates] = useState(0);\n  const [description, setDescription] = useState(\"\");\n\n  const handleChangeAddress = event => {\n    setAddress(event.target.value);\n  };\n\n  const handleChangeRent = event => {\n    setRent(parseInt(event.target.value));\n  };\n\n  const handleChangeRomMates = event => {\n    setRoomMates(parseInt(event.target.value));\n  };\n\n  const handleChangeDescription = event => {\n    setDescription(event.target.value);\n  };\n\n  const [type, setType] = useState(1);\n  const user = Cookies.get(\"user\");\n  const id = parseInt(user.toString().split('\"')[7]);\n  const token = parseInt(user.toString().split('\"')[3]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (address === \"\") {\n      alert(\"Unesite adresu!\");\n    } else if (roomMates === \"\") {\n      alert(\"Unesite broj cimera!\");\n    } else if (rent === \"\") {\n      alert(\"Unesite cijenu!\");\n    } else if (description === \"\") {\n      alert(\"Unesite opis!\");\n    } else {\n      const requestBody = {\n        query: `\n                mutation {\n                    addPost(postInfo: {\n                    author: 59,\n                    post_type: 1,\n                    description: \"nesto\",\n                    address: \"address\",\n                    rent: 200,\n                    num_of_roommates: 2\n                    }) {\n                    post_id\n                    description\n                    address\n                    rent\n                    num_of_roommates\n                    author {\n                        user_id\n                        username\n                        name\n                        surname\n                        city\n                        address\n                        email\n                        bio\n                        gender\n                        date_of_birth\n                        pr_picture_url\n                        pref_roommate_num\n                    }\n                    post_type {\n                        post_type_id\n                    }\n                    }\n                }\n                `\n      };\n      fetch('http://localhost:4000/graphql', {\n        method: \"POST\",\n        body: JSON.stringify(requestBody),\n        context: {\n          headers: {\n            authorisation: token\n          }\n        }\n      }).then(res => {\n        console.log(res);\n\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Greška!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(resData);\n        /*if(resData.data.login !== null) {\n            setTimeout(function () {\n                alert(\"Uspješno kreiran novi oglas!\");\n            }, 1);\n        } else {\n            alert(\"Unesite obavezna polja!\");\n        }*/\n      }).catch(err => {\n        console.log(\"Error \" + err.message);\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ToolbarLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.DodajOglas,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Forma,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }, \"Objavi svoj oglas!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }, \"Ako \\u017Eelite da objavite svoj oglas i ponudu za cimere, molim Vas ispunite obrazac ispod.\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 21\n    }\n  }, \"Po\\u0161aljite nam poruku\"), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 28\n    }\n  }, \"Adresa\"), \" (required)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: event => {\n      handleChangeAddress(event);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 28\n    }\n  }, \"Broj cimera\"), \" (required)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: event => {\n      handleChangeRomMates(event);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 28\n    }\n  }, \"Cijena\"), \" (required)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: event => {\n      handleChangeRent(event);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 28\n    }\n  }, \"Va\\u0161a oglas\"), \" (required)\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    rows: \"7\",\n    cols: \"50\",\n    onChange: event => {\n      handleChangeDescription(event);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    onClick: event => {\n      handleSubmit(event);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, \"OBJAVI\")), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default DodajOglas;\n/* Napraviti prvo dodavanje bez tipa oglasa */\n\n/* Napraviti i checkbox za tip oglasa postTypePostTypeId */\n\n/* Napraviti dodavanje oglasa i radio buttone u formi */\n\n/* Napraviti dodavanje kontakta u tabelu */\n\n/* Popraviti warninge */","map":{"version":3,"sources":["/home/rootpc/Desktop/Cimeri/Front/trazimcimera-master/src/views/DodajOglas/DodajOglas.js"],"names":["React","useState","ToolbarLayout","classes","Footer","AuthApi","Cookies","useHistory","Mutation","gql","DodajOglas","props","POST_MUTATION","Auth","useContext","address","setAddress","rent","setRent","roomMates","setRoomMates","description","setDescription","handleChangeAddress","event","target","value","handleChangeRent","parseInt","handleChangeRomMates","handleChangeDescription","type","setType","user","get","id","toString","split","token","handleSubmit","preventDefault","alert","requestBody","query","fetch","method","body","JSON","stringify","context","headers","authorisation","then","res","console","log","status","Error","json","resData","catch","err","message","Forma","Button"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAGA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAE1B,QAAMC,aAAa,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAA1B;AAqCA,QAAMI,IAAI,GAAGb,KAAK,CAACc,UAAN,CAAiBT,OAAjB,CAAb;AAEA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMsB,mBAAmB,GAAIC,KAAD,IAAW;AACnCR,IAAAA,UAAU,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAChCN,IAAAA,OAAO,CAACU,QAAQ,CAACJ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT,CAAP;AACH,GAFD;;AAGA,QAAMG,oBAAoB,GAAIL,KAAD,IAAW;AACpCJ,IAAAA,YAAY,CAACQ,QAAQ,CAACJ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT,CAAZ;AACH,GAFD;;AAGA,QAAMI,uBAAuB,GAAIN,KAAD,IAAW;AACvCF,IAAAA,cAAc,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACH,GAFD;;AAIA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkB/B,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAMgC,IAAI,GAAG3B,OAAO,CAAC4B,GAAR,CAAY,MAAZ,CAAb;AACA,QAAMC,EAAE,GAAGP,QAAQ,CAACK,IAAI,CAACG,QAAL,GAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAD,CAAnB;AACA,QAAMC,KAAK,GAAGV,QAAQ,CAACK,IAAI,CAACG,QAAL,GAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAD,CAAtB;;AAEA,QAAME,YAAY,GAAIf,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACgB,cAAN;;AACA,QAAGzB,OAAO,KAAK,EAAf,EAAmB;AACf0B,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACH,KAFD,MAEO,IAAItB,SAAS,KAAK,EAAlB,EAAsB;AACzBsB,MAAAA,KAAK,CAAC,sBAAD,CAAL;AACH,KAFM,MAEA,IAAIxB,IAAI,KAAK,EAAb,EAAiB;AACpBwB,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACH,KAFM,MAEA,IAAIpB,WAAW,KAAK,EAApB,EAAwB;AAC3BoB,MAAAA,KAAK,CAAC,eAAD,CAAL;AACH,KAFM,MAEA;AACH,YAAMC,WAAW,GAAG;AAChBC,QAAAA,KAAK,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADQ,OAApB;AAsCAC,MAAAA,KAAK,CAAC,+BAAD,EAAkC;AACnCC,QAAAA,MAAM,EAAE,MAD2B;AAEnCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAF6B;AAGnCO,QAAAA,OAAO,EAAE;AAACC,UAAAA,OAAO,EAAE;AACfC,YAAAA,aAAa,EAAEb;AADA;AAAV;AAH0B,OAAlC,CAAL,CAOGc,IAPH,CAOQC,GAAG,IAAI;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,YAAGA,GAAG,CAACG,MAAJ,KAAe,GAAf,IAAsBH,GAAG,CAACG,MAAJ,KAAe,GAAxC,EAA6C;AACzC,gBAAM,IAAIC,KAAJ,CAAU,SAAV,CAAN;AACH;;AACD,eAAOJ,GAAG,CAACK,IAAJ,EAAP;AACH,OAbD,EAaGN,IAbH,CAaQO,OAAO,IAAI;AACfL,QAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;AACA;;;;;;;AAOH,OAtBD,EAsBGC,KAtBH,CAsBSC,GAAG,IAAI;AACZP,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAWM,GAAG,CAACC,OAA3B;AACH,OAxBD;AAyBH;AACJ,GA3ED;;AA+EA,sBACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAE3D,OAAO,CAACO,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAEP,OAAO,CAAC4D,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oGAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAHJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP,gBALJ,eAMI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAGvC,KAAD,IAAW;AAACD,MAAAA,mBAAmB,CAACC,KAAD,CAAnB;AAA2B,KAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP,gBAPJ,eAQI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAGA,KAAD,IAAW;AAACK,MAAAA,oBAAoB,CAACL,KAAD,CAApB;AAA4B,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP,gBATJ,eAUI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAGA,KAAD,IAAW;AAACG,MAAAA,gBAAgB,CAACH,KAAD,CAAhB;AAAwB,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,eAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP,gBAXJ,eAYI;AAAU,IAAA,IAAI,EAAC,GAAf;AAAmB,IAAA,IAAI,EAAC,IAAxB;AAA6B,IAAA,QAAQ,EAAGA,KAAD,IAAW;AAACM,MAAAA,uBAAuB,CAACN,KAAD,CAAvB;AAA+B,KAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,eAaI;AAAQ,IAAA,SAAS,EAAErB,OAAO,CAAC6D,MAA3B;AAAmC,IAAA,OAAO,EAAExC,KAAK,IAAI;AAACe,MAAAA,YAAY,CAACf,KAAD,CAAZ;AAAoB,KAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ,CAFJ,eAiBI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBJ,CADJ,CADJ;AAwBH,CAxKD;;AA0KA,eAAed,UAAf;AAEA;;AACA;;AACA;;AACA;;AACA","sourcesContent":["import React, { useState } from \"react\";\nimport ToolbarLayout from \"../../components/ToolbarLayout/ToolbarLayout\";\nimport classes from './DodajOglas.css';\nimport Footer from \"../../components/Footer/Footer\";\nimport AuthApi from \"../../auth-api\";\nimport Cookies from 'js-cookie';\nimport { useHistory } from \"react-router-dom\";\nimport { Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\n\nconst DodajOglas = (props) => {\n\n    const POST_MUTATION = gql`\n        mutation {\n            addPost(postInfo: {\n            author: $id,\n            post_type: $type,\n            description: $description,\n            address: $address,\n            rent: $rent,\n            num_of_roommates: $roomMates,\n            }) {\n            post_id\n            description\n            address\n            rent\n            num_of_roommates\n            author {\n                user_id\n                username\n                name\n                surname\n                city\n                address\n                email\n                bio\n                gender\n                date_of_birth\n                pr_picture_url\n                pref_roommate_num\n            }\n            post_type {\n                post_type_id\n            }\n            }\n        }\n        `\n        \n\n    const Auth = React.useContext(AuthApi);\n\n    const [address, setAddress] = useState(\"\");\n    const [rent, setRent] = useState(\"\");\n    const [roomMates, setRoomMates] = useState(0);\n    const [description, setDescription] = useState(\"\");\n\n    const handleChangeAddress = (event) => {\n        setAddress(event.target.value);\n    }\n\n    const handleChangeRent = (event) => {\n        setRent(parseInt(event.target.value));\n    }\n    const handleChangeRomMates = (event) => {\n        setRoomMates(parseInt(event.target.value));\n    }\n    const handleChangeDescription = (event) => {\n        setDescription(event.target.value);\n    }\n\n    const [type, setType] = useState(1);\n    const user = Cookies.get(\"user\");\n    const id = parseInt(user.toString().split('\"')[7]);\n    const token = parseInt(user.toString().split('\"')[3]);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if(address === \"\") {\n            alert(\"Unesite adresu!\")\n        } else if (roomMates === \"\") {\n            alert(\"Unesite broj cimera!\")\n        } else if (rent === \"\") {\n            alert(\"Unesite cijenu!\")\n        } else if (description === \"\") {\n            alert(\"Unesite opis!\");\n        } else {\n            const requestBody = {\n                query: `\n                mutation {\n                    addPost(postInfo: {\n                    author: 59,\n                    post_type: 1,\n                    description: \"nesto\",\n                    address: \"address\",\n                    rent: 200,\n                    num_of_roommates: 2\n                    }) {\n                    post_id\n                    description\n                    address\n                    rent\n                    num_of_roommates\n                    author {\n                        user_id\n                        username\n                        name\n                        surname\n                        city\n                        address\n                        email\n                        bio\n                        gender\n                        date_of_birth\n                        pr_picture_url\n                        pref_roommate_num\n                    }\n                    post_type {\n                        post_type_id\n                    }\n                    }\n                }\n                `\n            };\n\n            fetch('http://localhost:4000/graphql', {\n                method: \"POST\",\n                body: JSON.stringify(requestBody),\n                context: {headers: {\n                    authorisation: token\n                  }, \n                }\n            }).then(res => {\n                console.log(res);\n                if(res.status !== 200 && res.status !== 201) {\n                    throw new Error('Greška!');\n                }\n                return res.json();\n            }).then(resData => {\n                console.log(resData);\n                /*if(resData.data.login !== null) {\n                    setTimeout(function () {\n                        alert(\"Uspješno kreiran novi oglas!\");\n                    }, 1);\n                } else {\n                    alert(\"Unesite obavezna polja!\");\n                }*/\n            }).catch(err => {\n                console.log(\"Error \" + err.message);\n            });\n        }\n    }\n        \n    \n\n    return (\n        <ToolbarLayout>\n            <div className={classes.DodajOglas}>\n                \n                <div className={classes.Forma}>\n                    <h1>Objavi svoj oglas!</h1>\n                    <p>Ako želite da objavite svoj oglas i ponudu za cimere, molim Vas ispunite obrazac ispod.</p>\n                    <h4>Pošaljite nam poruku</h4>\n                    \n                    <label><strong>Adresa</strong> (required)</label>\n                    <input type=\"text\" onChange={(event) => {handleChangeAddress(event)}}/>\n                    <label><strong>Broj cimera</strong> (required)</label>\n                    <input type=\"text\" onChange={(event) => {handleChangeRomMates(event)}}/>\n                    <label><strong>Cijena</strong> (required)</label>\n                    <input type=\"text\" onChange={(event) => {handleChangeRent(event)}}/>\n                    <label><strong>Vaša oglas</strong> (required)</label>\n                    <textarea rows=\"7\" cols=\"50\" onChange={(event) => {handleChangeDescription(event)}}/>\n                    <button className={classes.Button} onClick={event => {handleSubmit(event)}}>OBJAVI</button>\n                </div>\n                <Footer/>\n            </div>\n\n        </ToolbarLayout>\n    )\n}\n\nexport default DodajOglas;\n\n/* Napraviti prvo dodavanje bez tipa oglasa */\n/* Napraviti i checkbox za tip oglasa postTypePostTypeId */\n/* Napraviti dodavanje oglasa i radio buttone u formi */\n/* Napraviti dodavanje kontakta u tabelu */\n/* Popraviti warninge */\n"]},"metadata":{},"sourceType":"module"}